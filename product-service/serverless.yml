service: product-service
app: shop-react-redux-cloudfront-backend

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  lambdaHashingVersion: 20201221
  stage: dev
  region: eu-central-1

  environment:
    SQS_URL: Ref ${env:SQS_URL}
    SNS_TOPIC: !Ref ${env:SNS_TOPIC}

  iam:
    role:
      statements:
        - Effect: Allow
          Action: sns:*
          Resource: '*'

useDotenv: true

resources:
  Resources:
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopicDev
    SNSCheapProduct:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:EMAIL_DEV}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          isExpensive:
            - 'false'
    SNSExpensiveProduct:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:EMAIL_MAIN}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          isExpensive:
            - 'true'

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  webpack:
    webpackConfig: webpack.config.js
    includeModules: true
    packager: yarn

functions:
  getAPI:
    handler: handler.getAPI
    events:
      - http:
          path: api
          method: GET

  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          path: products/mock
          method: GET

  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/mock/{productId}
          method: GET
          request:
            parameters:
              paths:
                productId: true

  getProductsFromDB:
    handler: handler.getProductsFromDB
    events:
      - http:
          path: products
          method: GET

  getProductFromDB:
    handler: handler.getProductFromDB
    events:
      - http:
          path: products/{productId}
          method: GET
          request:
            parameters:
              paths:
                productId: true

  addProduct:
    handler: handler.addProduct
    events:
      - http:
          path: products
          method: post
          cors: true
      - http:
          path: products
          method: put
          cors: true

  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn: ${env:SQS_ARN}
